#include <iostream>
#include <string>
using namespace std;
// Определение структуры
struct Node {
    string name;
    int age;
    double score;
    Node* next;
};
// Функция для добавления элемента в начало списка
void addToBeginning(Node*& head, string name, int age, double score) {
    Node* newNode = new Node;
    newNode->name = name;
    newNode->age = age;
    newNode->score = score;
    newNode->next = head;
    head = newNode;
}
// Функция для добавления элемента в конец списка
void addToEnd(Node*& head, string name, int age, double score) {
    Node* newNode = new Node;
    newNode->name = name;
    newNode->age = age;
    newNode->score = score;
    newNode->next = nullptr;
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}
// Функция для добавления элемента после заданного элемента
void addAfter(Node*& head, string afterName, string name, int age, double score) {
    Node* temp = head;
    while (temp != nullptr && temp->name != afterName) {
        temp = temp->next;
    }
    if (temp != nullptr) {
        Node* newNode = new Node;
        newNode->name = name;
        newNode->age = age;
        newNode->score = score;
        newNode->next = temp->next;
        temp->next = newNode;
    }
}
// Функция для добавления элемента перед заданным элементом
void addBefore(Node*& head, string beforeName, string name, int age, double score) {
    if (head == nullptr) return;

    if (head->name == beforeName) {
        addToBeginning(head, name, age, score);
        return;
    }
    Node* temp = head;
    while (temp->next != nullptr && temp->next->name != beforeName) {
        temp = temp->next;
    }
    if (temp->next != nullptr) {
        Node* newNode = new Node;
        newNode->name = name;
        newNode->age = age;
        newNode->score = score;
        newNode->next = temp->next;
        temp->next = newNode;
    }
}
// Функция для удаления элемента с заданным именем
void deleteByName(Node*& head, string name) {
    Node* temp = head;
    Node* prev = nullptr;
    if (temp != nullptr && temp->name == name) {
        head = temp->next;
        delete temp;
        return;
    }
    while (temp != nullptr && temp->name != name) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == nullptr) return;
    prev->next = temp->next;
    delete temp;
}
// Функция для вывода списка на экран
void printList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << "Name: " << temp->name << ", Age: " << temp->age << ", Score: " << temp->score << endl;
        temp = temp->next;
    }
}
// Основная функция
int main() {
    Node* head = nullptr;
    // Добавление элементов в список
    addToEnd(head, "Маша", 23, 95.5);
    addToBeginning(head, "Денис", 22, 88.0);
    addAfter(head, "Денис", "Александр", 24, 91.0);
    addBefore(head, "Александр", "НИкита", 20, 85.0);
    // Вывод списка
    cout << "Изначальный список:" << endl;
    printList(head);
    // Удаление элемента
    deleteByName(head, "Александр");
    cout << "\nСписок после удаления Александра:" << endl;
    printList(head);
    return 0;
}
