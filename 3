#include <iostream>
#include <cmath>
using namespace std;

// Абстрактный класс Точка
class Point {
protected:
    double x, y;
public:
    Point(double x = 0, double y = 0) : x(x), y(y) {}
    virtual ~Point() {}

    // Чисто виртуальные методы
    virtual void draw() const = 0;
    virtual void hide() const = 0;
    
    void move(double dx, double dy) {
        x += dx;
        y += dy;
    }
    
    virtual void rotate(double angle) = 0;
    
    double getX() const { return x; }
    double getY() const { return y; }
    
    void setX(double newX) { x = newX; }
    void setY(double newY) { y = newY; }
};

// Класс Линия
class Line : public Point {
protected:
    double x2, y2;
public:
    Line(double x1, double y1, double x2, double y2) 
        : Point(x1, y1), x2(x2), y2(y2) {}
    
    void draw() const override {
        cout << "Drawing line from (" << x << "," << y << ") to (" << x2 << "," << y2 << ")\n";
    }
    
    void hide() const override {
        cout << "Hiding line from (" << x << "," << y << ") to (" << x2 << "," << y2 << ")\n";
    }
    
    void rotate(double angle) override {
        // Поворот второй точки относительно первой
        double dx = x2 - x;
        double dy = y2 - y;
        
        double rad = angle * M_PI / 180.0;
        double cosA = cos(rad);
        double sinA = sin(rad);
        
        x2 = x + dx * cosA - dy * sinA;
        y2 = y + dx * sinA + dy * cosA;
    }
    
    double getX2() const { return x2; }
    double getY2() const { return y2; }
};

// Базовый класс для квадрата (виртуальный базовый класс)
class SquareBase : virtual public Point {
protected:
    double side;
    double angle; // угол поворота в градусах
public:
    SquareBase(double x, double y, double side, double angle = 0) 
        : Point(x, y), side(side), angle(angle) {}
    
    virtual void draw() const = 0;
    virtual void hide() const = 0;
    
    void rotate(double angle) override {
        this->angle += angle;
    }
    
    double getSide() const { return side; }
};

// Класс Квадрат
class Square : public SquareBase {
public:
    Square(double x, double y, double side, double angle = 0) 
        : SquareBase(x, y, side, angle) {}
    
    void draw() const override {
        cout << "Drawing square at (" << x << "," << y << ") with side " << side 
             << " and angle " << angle << " degrees\n";
    }
    
    void hide() const override {
        cout << "Hiding square at (" << x << "," << y << ") with side " << side 
             << " and angle " << angle << " degrees\n";
    }
};

// Класс Ромб
class Rhombus : public SquareBase {
protected:
    double angle2; // угол между сторонами
public:
    Rhombus(double x, double y, double side, double angle, double angle2) 
        : SquareBase(x, y, side, angle), angle2(angle2) {}
    
    void draw() const override {
        cout << "Drawing rhombus at (" << x << "," << y << ") with side " << side 
             << ", rotation angle " << angle << " and inner angle " << angle2 << " degrees\n";
    }
    
    void hide() const override {
        cout << "Hiding rhombus at (" << x << "," << y << ") with side " << side 
             << ", rotation angle " << angle << " and inner angle " << angle2 << " degrees\n";
    }
};

// Класс Прямоугольник
class Rectangle : virtual public SquareBase {
protected:
    double height;
public:
    Rectangle(double x, double y, double width, double height, double angle = 0) 
        : SquareBase(x, y, width, angle), height(height) {}
    
    void draw() const override {
        cout << "Drawing rectangle at (" << x << "," << y << ") with width " << side 
             << ", height " << height << " and angle " << angle << " degrees\n";
    }
    
    void hide() const override {
        cout << "Hiding rectangle at (" << x << "," << y << ") with width " << side 
             << ", height " << height << " and angle " << angle << " degrees\n";
    }
};

// Класс Параллелограмм
class Parallelogram : public Rectangle, virtual public SquareBase {
protected:
    double angle2; // угол наклона
public:

Parallelogram(double x, double y, double width, double height, double angle, double angle2) 
        : SquareBase(x, y, width, angle), Rectangle(x, y, width, height, angle), angle2(angle2) {}
    
    void draw() const override {
        cout << "Drawing parallelogram at (" << x << "," << y << ") with width " << side 
             << ", height " << height << ", rotation angle " << angle 
             << " and skew angle " << angle2 << " degrees\n";
    }
    
    void hide() const override {
        cout << "Hiding parallelogram at (" << x << "," << y << ") with width " << side 
             << ", height " << height << ", rotation angle " << angle 
             << " and skew angle " << angle2 << " degrees\n";
    }
};

// Функция для демонстрации позднего связывания
void manipulateShape(Point* shape) {
    shape->draw();
    shape->move(1, 1);
    shape->rotate(45);
    shape->draw();
    shape->hide();
    cout << "-----------------\n";
}

int main() {
    // Демонстрация работы с различными фигурами
    Line line(0, 0, 2, 2);
    Square square(1, 1, 3);
    Rhombus rhombus(2, 2, 4, 0, 60);
    Rectangle rectangle(3, 3, 5, 3);
    Parallelogram parallelogram(4, 4, 6, 2, 0, 30);
    
    // Массив указателей на базовый класс
    Point* shapes[] = {&line, &square, &rhombus, &rectangle, &parallelogram};
    
    // Демонстрация позднего связывания
    for (Point* shape : shapes) {
        manipulateShape(shape);
    }
    
    return 0;
}
