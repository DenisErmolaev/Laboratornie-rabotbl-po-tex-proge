> А:
#include <iostream>
using namespace std;

class vect {
public:
    int dim;
    double* data;  // Изменил название с 'b' на 'data' для лучшей читаемости
    int id;        // Изменил название с 'num' на 'id'
    static int count;

    vect(int d = 3) : dim(d) {
        count++;
        id = count;
        data = new double[dim]; 
        for (int i = 0; i < dim; i++) data[i] = 0;
        cout << "Создан вектор #" << id << " (размерность " << dim << ")" << endl;
    }

    vect(const vect& v) : dim(v.dim) {
        count++;
        id = count;
        data = new double[dim];
        for (int i = 0; i < dim; i++) data[i] = v.data[i];
        cout << "Скопирован вектор #" << id << " из вектора #" << v.id << endl;
    }

    ~vect() {
        cout << "Удалён вектор #" << id << endl;
        delete[] data; 
    }

    vect operator+(const vect& v) const {  // Добавил const и ссылку
        vect res(dim);
        for (int i = 0; i < dim; i++) res.data[i] = data[i] + v.data[i];
        cout << "Сложение векторов #" << id << " и #" << v.id << endl;
        return res;
    }

    vect operator-(const vect& v) const {  // Добавил const и ссылку
        vect res(dim);
        for (int i = 0; i < dim; i++) res.data[i] = data[i] - v.data[i];
        cout << "Вычитание векторов #" << id << " и #" << v.id << endl;
        return res;
    }

    vect operator-() const {  // Добавил const
        vect res(dim);
        for (int i = 0; i < dim; i++) res.data[i] = -data[i];
        cout << "Инверсия вектора #" << id << endl;
        return res;
    }

    double operator*(const vect& v) const {  // Добавил const и ссылку
        double res = 0;
        for (int i = 0; i < dim; i++) res += data[i] * v.data[i];
        cout << "Скалярное произведение векторов #" << id << " и #" << v.id << endl;
        return res;
    }

    vect& operator=(const vect& v) {  // Добавил const и ссылку
        if (this != &v) {
            if (dim != v.dim) {
                delete[] data;
                dim = v.dim;
                data = new double[dim];
            }
            for (int i = 0; i < dim; i++) data[i] = v.data[i];
        }
        cout << "Присваивание вектора #" << v.id << " вектору #" << id << endl;
        return *this;
    }
};

int vect::count = 0;

vect operator*(double k, const vect& v) {  // Добавил const и ссылку
    vect res(v.dim);
    for (int i = 0; i < v.dim; i++) res.data[i] = k * v.data[i];
    cout << "Умножение вектора #" << v.id << " на скаляр " << k << endl;
    return res;
}

class matr {
public:
    int dim;
    double** data;  // Изменил название с 'a' на 'data'
    int id;         // Изменил название с 'num' на 'id'
    static int count;

    matr(int d = 3) : dim(d) {
        count++;
        id = count;
        data = new double*[dim];  
        for (int i = 0; i < dim; i++) {
            data[i] = new double[dim];  
            for (int j = 0; j < dim; j++) data[i][j] = 0;
        }
        cout << "Создана матрица #" << id << " (размерность " << dim << "x" << dim << ")" << endl;
    }

    matr(const matr& m) : dim(m.dim) {
        count++;
        id = count;
        data = new double*[dim];
        for (int i = 0; i < dim; i++) {
            data[i] = new double[dim];
            for (int j = 0; j < dim; j++) data[i][j] = m.data[i][j];
        }
        cout << "Скопирована матрица #" << id << " из матрицы #" << m.id << endl;
    }

    ~matr() {
        cout << "Удалена матрица #" << id << endl;
        for (int i = 0; i < dim; i++) delete[] data[i];
        delete[] data;
    }

    matr operator+(const matr& m) const {  // Добавил const и ссылку
        matr res(dim);
        for (int i = 0; i < dim; i++)
            for (int j = 0; j < dim; j++)
                res.data[i][j] = data[i][j] + m.data[i][j];
        cout << "Сложение матриц #" << id << " и #" << m.id << endl;
        return res;
    }

> А:
matr operator-(const matr& m) const {  // Добавил const и ссылку
        matr res(dim);
        for (int i = 0; i < dim; i++)
            for (int j = 0; j < dim; j++)
                res.data[i][j] = data[i][j] - m.data[i][j];
        cout << "Вычитание матриц #" << id << " и #" << m.id << endl;
        return res;
    }

    matr operator-() const {  // Добавил const
        matr res(dim);
        for (int i = 0; i < dim; i++)
            for (int j = 0; j < dim; j++)
                res.data[i][j] = -data[i][j];
        cout << "Инверсия (унарный минус) матрицы #" << id << endl;
        return res;
    }

    matr operator*(const matr& m) const {  // Добавил const и ссылку
        matr res(dim);
        for (int i = 0; i < dim; i++)
            for (int j = 0; j < dim; j++) {
                res.data[i][j] = 0;
                for (int k = 0; k < dim; k++)
                    res.data[i][j] += data[i][k] * m.data[k][j];
            }
        cout << "Умножение матриц #" << id << " и #" << m.id << endl;
        return res;
    }

    matr& operator=(const matr& m) {  // Добавил const и ссылку
        if (this != &m) {
            if (dim != m.dim) {
                for (int i = 0; i < dim; i++) delete[] data[i];
                delete[] data;
                dim = m.dim;
                data = new double*[dim];
                for (int i = 0; i < dim; i++) data[i] = new double[dim];
            }
            for (int i = 0; i < dim; i++)
                for (int j = 0; j < dim; j++)
                    data[i][j] = m.data[i][j];
        }
        cout << "Присваивание матрицы #" << m.id << " матрице #" << id << endl;
        return *this;
    }

    vect operator*(const vect& v) const {  // Добавил const и ссылку
        vect res(dim);
        for (int i = 0; i < dim; i++) {
            res.data[i] = 0;
            for (int j = 0; j < dim; j++)
                res.data[i] += data[i][j] * v.data[j];
        }
        cout << "Умножение матрицы #" << id << " на вектор #" << v.id << endl;
        return res;
    }
};

int matr::count = 0;

matr operator*(double k, const matr& m) {  // Добавил const и ссылку
    matr res(m.dim);
    for (int i = 0; i < m.dim; i++)
        for (int j = 0; j < m.dim; j++)
            res.data[i][j] = k * m.data[i][j];
    cout << "Умножение матрицы #" << m.id << " на скаляр " << k << endl;
    return res;
}

int main() {
    // Тестирование векторов
    vect v1(3), v2(3);
    for (int i = 0; i < 3; i++) {
        v1.data[i] = i + 1;
        v2.data[i] = (i + 1) * 2;
    }

    cout << "\nОперации с векторами:\n";
    vect v3 = v1 + v2;
    vect v4 = v1 - v2;
    vect v5 = -v1;
    vect v6 = 2.5 * v1;
    double dot = v1 * v2;

    // Тестирование матриц
    matr m1(3), m2(3);
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            m1.data[i][j] = i * 3 + j + 1;
            m2.data[i][j] = (i * 3 + j + 1) * 2;
        }
    }

    cout << "\nОперации с матрицами:\n";
    matr m3 = m1 + m2;
    matr m4 = m1 - m2;
    matr m5 = -m1;
    matr m6 = 1.5 * m1;
    matr m7 = m1 * m2;
    vect mv = m1 * v1;

    cout << "\nЗавершение программы...\n";
    return 0;
}
